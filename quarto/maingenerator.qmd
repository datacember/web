---
editor: visual
format: 
  html:
    number-sections: false
---
```{=html}
<head>
	<link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">
</head>    
```

[comment]: <> (Header Goes Here)


<div class="wrapper-feature" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; position: relative;">
<canvas id="lorenzCanvas" width=800% height=491.2% style="opacity; 0; position: absolute;"></canvas>
<p id="logo-big" style="font-family: 'Libre Baskerville', Serif;
font-size: 5em; letter-spacing: -0.09em;
z-index=1; position: absolute;"
	>Datacember</p>
</div>

<script>
	const canvas = document.getElementById('lorenzCanvas');
	const ctx = canvas.getContext('2d');
	ctx.fillStyle = 'white';
	ctx.fillRect(0, 0, canvas.width, canvas.height);

	// Lorenz parameters
	const sigma = 10; // Prandtl number
	const rho = 40; // Rayleigh number
	const beta = 8 / 3; // Geometric factor
	const dt = 0.001; // Time step

	const points = [];
	for (let i = 0; i < 2; i++) {
            points.push({
                x: Math.random() - 0.5,
                y: Math.random() - 0.5,
                z: Math.random() - 0.5,
                color: `hsl(${Math.random() * 360}, 70%, 60%)`
            });
        }

	// https://www.dynamicmath.xyz/strange-attractors/ TODO implement one of these attractors

	// Colors for each trajectory
	const colors = [
		'hsl(0, 70%, 0%)',
		'hsl(1, 0%, 0%)',
	];
	const pass = () => {};

	// Canvas dimensions
	const width = canvas.width;
	const height = canvas.height;

	// Center of the canvas
	const cx = width / 2;
	const cy = height / 2 + 250;

	// Scale factor
	const scale = 5;

	// Animation loop
	function animate() {
		ctx.fillStyle = 'rgba(0, 255, 255, 0.01)'; // Fading background
		pass();
		
		ctx.fillRect(0, 0, width, height);

		points.forEach((state, index) => {
			// Lorenz equations
			const dx = sigma * (state.y - state.x);
			const dy = state.x * (rho - state.z) - state.y;
			const dz = state.x * state.y - beta * state.z;

			state.x += dx * dt;
			state.y += dy * dt;
			state.z += dz * dt;

			// Map attractor values to canvas
			// map x -> 2x
			const px = cx + state.x * scale * 2;
			const py = cy - state.z * scale;

			// Draw the point
			ctx.beginPath();
			ctx.arc(px, py, 2, 0, Math.PI * 2);
			ctx.fillStyle = colors[index]; // Use different color for each trajectory
			ctx.fill();
		});

		// Loop the animation
		requestAnimationFrame(animate);
	}
	animate();
</script>



[comment]: <> (Lorenz Attractor)


:::: {.columns}

::: {.column width="50%"}

## Challenges

:::

::: {.column width="50%"}

## Quicklinks

:::

::::

[comment]: <> (Comment test)


:::: {.columns}

::: {.column width="50%"}

## Profile

:::

::: {.column width="50%"}

## Guides

:::

::::

